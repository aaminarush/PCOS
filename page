<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>PCOS Daily Tracker</title>
  <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/recharts/umd/Recharts.development.js"></script>
  <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet"/>
</head>
<body class="bg-gray-50 p-4">
  <div id="root"></div>

  <script type="text/babel">
    const { useState, useEffect } = React;
    const { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } = Recharts;

    const supplements = ["Saw Palmetto", "Vitamin D", "Turmeric", "Berberine", "Magnesium", "Gut Health", "NAC"];

    function PCOSTracker() {
      const [entries, setEntries] = useState([]);
      const [sleep, setSleep] = useState("");
      const [steps, setSteps] = useState("");

      // Load entries from localStorage
      useEffect(() => {
        const saved = localStorage.getItem("pcos_entries");
        if (saved) setEntries(JSON.parse(saved));
      }, []);

      // Save to localStorage on entry update
      useEffect(() => {
        localStorage.setItem("pcos_entries", JSON.stringify(entries));
      }, [entries]);

      const saveEntry = () => {
        const date = new Date().toISOString().split("T")[0];
        // Avoid duplicate entries for the same day
        const updatedEntries = entries.filter(e => e.date !== date);
        updatedEntries.push({ date, sleep: parseFloat(sleep) || 0, steps: parseInt(steps) || 0 });
        updatedEntries.sort((a, b) => a.date.localeCompare(b.date));
        setEntries(updatedEntries);
        setSleep("");
        setSteps("");
      };

      return (
        <div className="max-w-4xl mx-auto grid gap-6">
          <h1 className="text-3xl font-bold text-center">PCOS Daily Tracker</h1>

          <div className="bg-white p-4 rounded-xl shadow-md">
            <h2 className="text-xl font-semibold mb-4">Supplement Tracker</h2>
            {supplements.map(s => (
              <div key={s} className="flex items-center mb-2 space-x-4">
                <span className="w-32">{s}</span>
                <label><input type="checkbox" className="mr-1" />AM</label>
                <label><input type="checkbox" className="mr-1" />PM</label>
              </div>
            ))}
          </div>

          <div className="bg-white p-4 rounded-xl shadow-md">
            <h2 className="text-xl font-semibold mb-4">Sleep & Activity</h2>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block">Hours of Sleep:</label>
                <input type="number" value={sleep} onChange={e => setSleep(e.target.value)} className="mt-1 p-2 border rounded w-full" placeholder="e.g. 7.5"/>
              </div>
              <div>
                <label className="block">Steps:</label>
                <input type="number" value={steps} onChange={e => setSteps(e.target.value)} className="mt-1 p-2 border rounded w-full" placeholder="e.g. 8500"/>
              </div>
            </div>
          </div>

          <div className="bg-white p-4 rounded-xl shadow-md">
            <h2 className="text-xl font-semibold mb-4">Food Tracker</h2>
            {["Breakfast","Lunch","Dinner","Snack"].map(meal => (
              <div key={meal} className="mb-4">
                <label className="block font-medium">{meal}</label>
                <textarea className="w-full p-2 border rounded" placeholder={`What did you eat for ${meal.toLowerCase()}?`}></textarea>
                <div className="grid grid-cols-2 gap-4 mt-2">
                  <div>
                    <label>Protein (g):</label>
                    <input type="number" className="w-full p-1 border rounded"/>
                  </div>
                  <div>
                    <label>Fiber (g):</label>
                    <input type="number" className="w-full p-1 border rounded"/>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {entries.length > 0 && (
            <div className="bg-white p-4 rounded-xl shadow-md">
              <h2 className="text-xl font-semibold mb-4">Sleep & Steps History</h2>
              <ResponsiveContainer width="100%" height={250}>
                <LineChart data={entries}>
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="sleep" stroke="#8884d8" name="Sleep (hrs)" />
                  <Line type="monotone" dataKey="steps" stroke="#82ca9d" name="Steps" />
                </LineChart>
              </ResponsiveContainer>
            </div>
          )}

          <button onClick={saveEntry} className="w-full bg-blue-600 text-white p-3 rounded mt-4">Save Entry</button>
        </div>
      );
    }

    ReactDOM.createRoot(document.getElementById("root")).render(<PCOSTracker />);
  </script>
</body>
</html>
